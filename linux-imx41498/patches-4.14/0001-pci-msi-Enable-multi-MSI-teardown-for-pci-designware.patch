From 701b2971ca02c4ad02988a2a51478b85de717928 Mon Sep 17 00:00:00 2001
From: Gustavo Solaira <gustavos@codeaurora.org>
Date: Wed, 5 Dec 2018 12:19:08 -0800
Subject: [PATCH 1/3] pci/msi: Enable multi MSI teardown for pci-designware

A specific function is needed for tearing down devices
which request multiple MSIs in order to match the setup
function. The designware driver for example uses a bitmap
with order2 assignment so a corresponding order2 reset
is needed.

Signed-off-by: Gustavo Solaira <gustavos@codeaurora.org>
---
 drivers/pci/dwc/pcie-designware-host.c | 17 +++++++++++++++++
 drivers/pci/msi.c                      |  5 +++++
 include/linux/msi.h                    |  1 +
 3 files changed, 23 insertions(+)

diff --git a/drivers/pci/dwc/pcie-designware-host.c b/drivers/pci/dwc/pcie-designware-host.c
index 98e904b..afe239d 100644
--- a/drivers/pci/dwc/pcie-designware-host.c
+++ b/drivers/pci/dwc/pcie-designware-host.c
@@ -281,10 +281,27 @@ static void dw_msi_teardown_irq(struct msi_controller *chip, unsigned int irq)
 	clear_irq_range(pp, irq, 1, data->hwirq);
 }
 
+static void dw_msi_teardown_irqs(struct msi_controller *chip, struct pci_dev *dev)
+{
+	struct irq_data *data;
+	struct msi_desc *msi;
+	struct pcie_port *pp;
+	struct msi_desc *entry;
+
+	for_each_pci_msi_entry(entry, dev)
+		if (entry->irq) {
+			data = irq_get_irq_data(entry->irq);
+			msi = irq_data_get_msi_desc(data);
+			pp = (struct pcie_port *) msi_desc_to_pci_sysdata(msi);
+			clear_irq_range(pp, entry->irq, entry->nvec_used, data->hwirq);
+		}
+}
+
 static struct msi_controller dw_pcie_msi_chip = {
 	.setup_irq = dw_msi_setup_irq,
 	.setup_irqs = dw_msi_setup_irqs,
 	.teardown_irq = dw_msi_teardown_irq,
+	.teardown_irqs = dw_msi_teardown_irqs,
 };
 
 static int dw_pcie_msi_map(struct irq_domain *domain, unsigned int irq,
diff --git a/drivers/pci/msi.c b/drivers/pci/msi.c
index 496ed91..8d37f1c 100644
--- a/drivers/pci/msi.c
+++ b/drivers/pci/msi.c
@@ -130,6 +130,11 @@ void default_teardown_msi_irqs(struct pci_dev *dev)
 
 void __weak arch_teardown_msi_irqs(struct pci_dev *dev)
 {
+	struct msi_controller *chip = dev->bus->msi;
+
+	if (chip && chip->teardown_irqs)
+		return chip->teardown_irqs(chip, dev);
+
 	return default_teardown_msi_irqs(dev);
 }
 
diff --git a/include/linux/msi.h b/include/linux/msi.h
index cdd069c..9b95254 100644
--- a/include/linux/msi.h
+++ b/include/linux/msi.h
@@ -189,6 +189,7 @@ struct msi_controller {
 	int (*setup_irqs)(struct msi_controller *chip, struct pci_dev *dev,
 			  int nvec, int type);
 	void (*teardown_irq)(struct msi_controller *chip, unsigned int irq);
+	void (*teardown_irqs)(struct msi_controller *chip, struct pci_dev *dev);
 };
 
 #ifdef CONFIG_GENERIC_MSI_IRQ_DOMAIN
-- 
1.9.1

