#############################
# Misc
#############################

# Command used to reboot the host
host_reboot_cmd = /sbin/reboot

# Command used to crash the host
host_crash_cmd = /bin/echo 'c' > /proc/sysrq-trigger

# Shell script to perform general initialization, e.g.: initialize gpios using sysfs
init_shell_script = /usr/bin/modem-monitor-init.sh

# Timeout for the init script to complete in seconds
init_shell_script_timeout_sec = 10

# How the modem is primarily connected to the host, either "pcie" or "usb"
modem_connection_method = pcie

# What to do when the modem crashes (after ramdump is done), "none" (exit the app),
# "crash" (call the crash command), "reboot" (call the reboot command),
# "recover" (perform hotplug to recover the modem)
modem_crash_action = reboot

# What to do when the modem cannot be detected after the retries, "none" (exit the app),
# "crash" (call the crash command), "reboot" (call the reboot command)
modem_poweron_failure_action = reboot

# Detection method used for the modem, "gpio" (uses the status gpio),
# "pcie" (read the status register using lspci)
modem_detection_method = gpio

# Timeout for each power-on retry in seconds
poweron_timeout_sec = 10

# Number of times to retry the detection, performs a soft reset after each retry and hard reset on the last one
poweron_retries = 0

# Timeout for QMI operations in milliseconds
qmi_timeout_ms = 2000

# Timeout for the modem to complete a graceful shutdown in milliseconds
# performs a hard reset if the shutdown is not completed by then
shutdown_timeout_ms = 30000

#############################
# PCIe hotplug
#############################

# Whether PCIe hotplug is supported or not
pcie_hotplug_support = false

# Whether the PCIe device can be removed
pcie_remove_support = true

# Command used to remove the PCIe bus for hotplug. Remove the device on i.MX6
# which is 0000:01:00.0. To support hotplug on i.MX8 need to remove the bridge
# port which is 0000:00:00.0
pcie_remove_cmd = /bin/echo 1 > /sys/bus/pci/devices/0000:01:00.0/remove

# Command used to trigger a rescan on the PCIe bus for hotplug
pcie_rescan_cmd = /bin/echo 1 > /sys/bus/pci/rescan

#############################
# PCIe detection method
#############################

# Command used to check the status of the PCIe EP
#pcie_status_cmd = /usr/sbin/setpci -s 00:01:00.0 STATUS

# Value of the PCIe status register when the EP is healthy
#pcie_status_active_value = 0010

# Value of the PCIe status register when the EP is unhealthy
#pcie_status_inactive_value = ffff

#############################
# GPIO options
#############################

# Use chardev gpio interface (/dev/gpiochipX) instead of the sysfs interface (/sys/class/gpio)
gpio_use_cdev = false

# Sysfs node for the reset gpio (if using the sysfs interface)
reset_gpio_file = /sys/class/gpio/gpio51

# Chardev chip for reset gpio (if using chardev interface)
reset_gpio_chip = 0

# Chardev gpio index in the gpiochip for reset gpio (if using chardev interface)
reset_gpio_line = 51

# Whether the reset gpio is active low (true) or not (false)
reset_gpio_inverted = true

# Time that the gpio needs to be asserted for a soft (S2) reset in milliseconds
reset_soft_time_ms = 2000

# Time that the gpio needs to be asserted for a hard (S3) reset in milliseconds,
# this is used on the last retry or if there is only one retry
reset_hard_time_ms = 16200

# Sysfs node for the status gpio (if using the sysfs interface)
status_gpio_file = /sys/class/gpio/gpio46

# Chardev gpio chip for status gpio (if using chardev interface)
status_gpio_chip = 0

# Chardev gpio index in the gpiochip for status gpio (if using chardev interface)
status_gpio_line = 46

# Whether the status gpio is active low (true) or not (false)
status_gpio_inverted = true

# Sysfs node for the power-on gpio (if using the sysfs interface)
#poweron_gpio_file = /sys/class/gpio/gpioXX

# Chardev gpio chip for poweron gpio (if using chardev interface)
#poweron_gpio_chip = Y

# Chardev gpio index in the gpiochip for poweron gpio (if using chardev interface)
#poweron_gpio_line = XX

# Whether the power-on gpio is active low (true) or not (false)
#poweron_gpio_inverted = false

#############################
# Ramdump
#############################

# Whether modem ramdump collection is supported or not
ramdump_support = true

# Interface used to download the ramdump, only "usb" supported for now
ramdump_interface = usb

# USB serial device node to use for qsahara
ramdump_port_file = /dev/ttyUSB0

# Timeout to wait for the USB serial device file to show up in seconds
ramdump_port_timeout_sec = 10

# Script used to collect the ramdump, it will usually call ks and compress the output
ramdump_shell_script = /usr/bin/modem-monitor-ramdump.sh

# Timeout to wait for the ramdump script to finish in seconds
ramdump_shell_script_timeout_sec = 240
